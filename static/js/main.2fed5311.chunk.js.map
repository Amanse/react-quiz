{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.tsx","components/Header.tsx","App.tsx","index.tsx"],"names":["Difficulty","Category","fetchQuizQuestions","difficulty","total_questions","category","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","QuestionCard","callback","userAnswer","questionNumber","totalQuestions","className","Card","Typography","color","component","variant","dangerouslySetInnerHTML","__html","ans","CardContent","ButtonGroup","orientation","Button","disabled","value","onClick","Header","AppBar","position","Toolbar","userCategory","ANIME","userDifficulty","EASY","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","setCategory","setDifficulty","setTotalQuestions","classes","darkTheme","createMuiTheme","palette","type","startTrivia","COMP","MOVIES","TV","MYTH","MEDIUM","HARD","newQuestions","ThemeProvider","length","FormControl","InputLabel","id","Select","labelId","onChange","e","target","MenuItem","Chip","style","padding","label","undefined","answer","currentTarget","correct","prev","answerObject","correctAnswer","background","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2fed5311.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\nexport type Question = {\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\"\n}\n\nexport enum Category {\n  MOVIES = 11,\n  ANIME = 31,\n  MYTH = 20,\n  TV = 14,\n  COMP = 18\n}\n\n//category codes\n//movies 11\n//anime 31\n//mythology 20\n//tv 14\n// computers 18\nexport const fetchQuizQuestions = async (\n  difficulty: Difficulty,\n  total_questions: number,\n  category: Category\n) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${total_questions}&difficulty=${difficulty}&type=multiple&category=${category}`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer\n    ])\n  }));\n};\n","export const shuffleArray = (array: any) =>\n  [...array].sort(() => Math.random() - 0.5);\n","import React from \"react\";\n\nimport { AnswerObject } from \"../App\";\n\nimport {\n  Card,\n  CardContent,\n  Button,\n  Typography,\n  ButtonGroup\n} from \"@material-ui/core\";\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: any;\n  userAnswer: AnswerObject | undefined;\n  questionNumber: number;\n  totalQuestions: number;\n};\n\nexport const QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNumber,\n  totalQuestions\n}) => {\n  return (\n    <div>\n      <p className=\"number\">\n        Question: {questionNumber} / {totalQuestions}\n      </p>\n      <Card className=\"questionCard\">\n        <Typography\n          color=\"textPrimary\"\n          component=\"h2\"\n          variant=\"h5\"\n          dangerouslySetInnerHTML={{ __html: question }}\n        />\n        <div>\n          {answers.map(ans => (\n            <CardContent key={ans}>\n              <ButtonGroup\n                variant=\"contained\"\n                orientation=\"vertical\"\n                color=\"secondary\"\n              >\n                <Button disabled={!!userAnswer} value={ans} onClick={callback}>\n                  <span dangerouslySetInnerHTML={{ __html: ans }} />\n                </Button>\n              </ButtonGroup>\n            </CardContent>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\n\nexport const Header = () => {\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h4\" className=\"header\">\n            React Quiz\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { fetchQuizQuestions } from \"./API\";\nimport \"./App.css\";\n\n//components\nimport { QuestionCard } from \"./components/QuestionCard\";\nimport {\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  makeStyles,\n  Chip\n} from \"@material-ui/core\";\nimport { createMuiTheme } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { Header } from \"./components/Header\";\n\n//types\nimport { QuestionState, Difficulty, Category } from \"./API\";\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nvar userCategory: Category = Category.ANIME;\nvar userDifficulty: Difficulty = Difficulty.EASY;\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 110\n  }\n}));\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [category, setCategory] = useState<string>(\"Anime\");\n  const [difficulty, setDifficulty] = useState<string>(\"Easy\");\n  const [totalQuestions, setTotalQuestions] = useState<number>(10);\n\n  const classes = useStyles();\n  const darkTheme = createMuiTheme({\n    palette: {\n      type: \"dark\"\n    }\n  });\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    //Category set\n    switch (category) {\n      case \"Anime\":\n        userCategory = Category.ANIME;\n        break;\n      case \"Comp\":\n        userCategory = Category.COMP;\n        break;\n      case \"Movies\":\n        userCategory = Category.MOVIES;\n        break;\n      case \"tv\":\n        userCategory = Category.TV;\n        break;\n      case \"myth\":\n        userCategory = Category.MYTH;\n        break;\n      default:\n        userCategory = Category.ANIME;\n    }\n\n    //Difficulty set\n    switch (difficulty) {\n      case \"Easy\":\n        userDifficulty = Difficulty.EASY;\n        break;\n      case \"Medium\":\n        userDifficulty = Difficulty.MEDIUM;\n        break;\n      case \"Hard\":\n        userDifficulty = Difficulty.HARD;\n        break;\n      default:\n        userDifficulty = Difficulty.EASY;\n        break;\n    }\n\n    const newQuestions = await fetchQuizQuestions(\n      userDifficulty,\n      totalQuestions,\n      userCategory\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      //User answers\n      const answer = e.currentTarget.value;\n      //Check answer if correct\n      const correct = questions[number].correct_answer === answer;\n      //Add score if correct\n      if (correct) setScore(prev => prev + 1);\n      //Save answer in array for userAnswers\n      const answerObject: AnswerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      };\n      if (correct) {\n        e.currentTarget.style.background = \"green\";\n        e.currentTarget.style.color = \"#fff\";\n      } else if (answer !== answerObject.correctAnswer) {\n        e.currentTarget.style.background = \"red\";\n        e.currentTarget.style.color = \"#fff\";\n      }\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    //move on to next question if not last\n    const nextQuestion = number + 1;\n    if (nextQuestion === totalQuestions) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n      <ThemeProvider theme={darkTheme}>\n        <Header />\n        {gameOver || userAnswers.length === totalQuestions ? (\n          <>\n            <div className=\"selectForGame\">\n              <FormControl className={classes.formControl}>\n                <InputLabel id=\"difficulty\">Difficulty</InputLabel>\n                <Select\n                  labelId=\"difficulty\"\n                  id=\"select1\"\n                  value={difficulty}\n                  onChange={(e: any) => {\n                    setDifficulty(e.target.value);\n                    setGameOver(true);\n                  }}\n                >\n                  <MenuItem value=\"Easy\">Easy</MenuItem>\n                  <MenuItem value=\"Medium\">Medium</MenuItem>\n                  <MenuItem value=\"Hard\">Hard</MenuItem>\n                </Select>\n              </FormControl>\n              <FormControl className={classes.formControl}>\n                <InputLabel id=\"category\">Category</InputLabel>\n                <Select\n                  labelId=\"category\"\n                  id=\"select2\"\n                  value={category}\n                  onChange={(e: any) => {\n                    setCategory(e.target.value);\n                    setGameOver(true);\n                  }}\n                >\n                  <MenuItem value=\"Anime\">Anime</MenuItem>\n                  <MenuItem value=\"Comp\">Comp</MenuItem>\n                  <MenuItem value=\"Movies\">Movies</MenuItem>\n                  <MenuItem value=\"tv\">TV</MenuItem>\n                </Select>\n              </FormControl>\n              <FormControl className={classes.formControl}>\n                <InputLabel id=\"totalQuestions\">Questions</InputLabel>\n                <Select\n                  labelId=\"totalQuestions\"\n                  id=\"select3\"\n                  value={totalQuestions}\n                  onChange={(e: any) => {\n                    setTotalQuestions(e.target.value);\n                    setGameOver(true);\n                  }}\n                >\n                  <MenuItem value={10}>10</MenuItem>\n                  <MenuItem value={15}>15</MenuItem>\n                  <MenuItem value={20}>20</MenuItem>\n                </Select>\n              </FormControl>\n            </div>\n\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className=\"start\"\n              onClick={startTrivia}\n            >\n              Start\n            </Button>\n          </>\n        ) : null}\n        {!gameOver ? (\n          <div className=\"chips-info\">\n            <Chip style={{ margin: \"0.7em\", padding: \"0.7em\" }} label={score} />\n            <Chip label={category} />\n          </div>\n        ) : null}\n        {/*!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n        {!gameOver ? <p>Category: {category} </p> : null*/}\n        {loading ? <p>Loading Questions.....</p> : null}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNumber={number + 1}\n            totalQuestions={totalQuestions}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver &&\n        !loading &&\n        userAnswers.length === number + 1 &&\n        number !== totalQuestions - 1 ? (\n          <Button color=\"secondary\" className=\"next\" onClick={nextQuestion}>\n            Next\n          </Button>\n        ) : null}\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}